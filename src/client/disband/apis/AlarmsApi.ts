/* tslint:disable */
/* eslint-disable */
/**
 * Disheap Service
 * Disheap API connection to Disbands and Disbeacs information
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Alarm,
    AlarmFromJSON,
    AlarmToJSON,
    AlarmDTO,
    AlarmDTOFromJSON,
    AlarmDTOToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface DeleteAlarmRequest {
    id: string;
}

export interface DeleteAlarmsByDisbandIdRequest {
    disbandId: string;
}

export interface GetAlarmsByDateBetweenAndDisbandIdRequest {
    minDate: number;
    maxDate: number;
    disbandId: string;
}

export interface GetAlarmsByDisbandIdRequest {
    disbandId: string;
}

export interface GetById8Request {
    id: string;
}

export interface SaveAlarmRequest {
    alarmDTO: AlarmDTO;
}

export interface UpdateAlarmRequest {
    id: string;
    alarmDTO: AlarmDTO;
}

/**
 * AlarmsApi - interface
 * 
 * @export
 * @interface AlarmsApiInterface
 */
export interface AlarmsApiInterface {
    /**
     * 
     * @summary Delete alarm
     * @param {string} id Alarm id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApiInterface
     */
    deleteAlarmRaw(requestParameters: DeleteAlarmRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Alarm>>;

    /**
     * Delete alarm
     */
    deleteAlarm(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Alarm>;

    /**
     * 
     * @summary Delete alarms by disband ID
     * @param {string} disbandId Disband ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApiInterface
     */
    deleteAlarmsByDisbandIdRaw(requestParameters: DeleteAlarmsByDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Alarm>>>;

    /**
     * Delete alarms by disband ID
     */
    deleteAlarmsByDisbandId(disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Alarm>>;

    /**
     * 
     * @summary Get alarms by date between and disband ID
     * @param {number} minDate Min date
     * @param {number} maxDate Max date
     * @param {string} disbandId Disband ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApiInterface
     */
    getAlarmsByDateBetweenAndDisbandIdRaw(requestParameters: GetAlarmsByDateBetweenAndDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Alarm>>>;

    /**
     * Get alarms by date between and disband ID
     */
    getAlarmsByDateBetweenAndDisbandId(minDate: number, maxDate: number, disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Alarm>>;

    /**
     * 
     * @summary Get alarms by disband ID
     * @param {string} disbandId Disband ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApiInterface
     */
    getAlarmsByDisbandIdRaw(requestParameters: GetAlarmsByDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Alarm>>>;

    /**
     * Get alarms by disband ID
     */
    getAlarmsByDisbandId(disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Alarm>>;

    /**
     * 
     * @summary Get alarm by ID
     * @param {string} id Alarm ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApiInterface
     */
    getById8Raw(requestParameters: GetById8Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Alarm>>;

    /**
     * Get alarm by ID
     */
    getById8(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Alarm>;

    /**
     * 
     * @summary Save alarm
     * @param {AlarmDTO} alarmDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApiInterface
     */
    saveAlarmRaw(requestParameters: SaveAlarmRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Alarm>>;

    /**
     * Save alarm
     */
    saveAlarm(alarmDTO: AlarmDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Alarm>;

    /**
     * 
     * @summary Update alarm
     * @param {string} id Alarm id
     * @param {AlarmDTO} alarmDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApiInterface
     */
    updateAlarmRaw(requestParameters: UpdateAlarmRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Update alarm
     */
    updateAlarm(id: string, alarmDTO: AlarmDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string>;

}

/**
 * 
 */
export class AlarmsApi extends runtime.BaseAPI implements AlarmsApiInterface {

    /**
     * Delete alarm
     */
    async deleteAlarmRaw(requestParameters: DeleteAlarmRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Alarm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAlarm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alarms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlarmFromJSON(jsonValue));
    }

    /**
     * Delete alarm
     */
    async deleteAlarm(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Alarm> {
        const response = await this.deleteAlarmRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Delete alarms by disband ID
     */
    async deleteAlarmsByDisbandIdRaw(requestParameters: DeleteAlarmsByDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Alarm>>> {
        if (requestParameters.disbandId === null || requestParameters.disbandId === undefined) {
            throw new runtime.RequiredError('disbandId','Required parameter requestParameters.disbandId was null or undefined when calling deleteAlarmsByDisbandId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alarms/disbands/{disbandId}`.replace(`{${"disbandId"}}`, encodeURIComponent(String(requestParameters.disbandId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlarmFromJSON));
    }

    /**
     * Delete alarms by disband ID
     */
    async deleteAlarmsByDisbandId(disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Alarm>> {
        const response = await this.deleteAlarmsByDisbandIdRaw({ disbandId: disbandId }, initOverrides);
        return await response.value();
    }

    /**
     * Get alarms by date between and disband ID
     */
    async getAlarmsByDateBetweenAndDisbandIdRaw(requestParameters: GetAlarmsByDateBetweenAndDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Alarm>>> {
        if (requestParameters.minDate === null || requestParameters.minDate === undefined) {
            throw new runtime.RequiredError('minDate','Required parameter requestParameters.minDate was null or undefined when calling getAlarmsByDateBetweenAndDisbandId.');
        }

        if (requestParameters.maxDate === null || requestParameters.maxDate === undefined) {
            throw new runtime.RequiredError('maxDate','Required parameter requestParameters.maxDate was null or undefined when calling getAlarmsByDateBetweenAndDisbandId.');
        }

        if (requestParameters.disbandId === null || requestParameters.disbandId === undefined) {
            throw new runtime.RequiredError('disbandId','Required parameter requestParameters.disbandId was null or undefined when calling getAlarmsByDateBetweenAndDisbandId.');
        }

        const queryParameters: any = {};

        if (requestParameters.minDate !== undefined) {
            queryParameters['min date'] = requestParameters.minDate;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['max date'] = requestParameters.maxDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alarms/date/between/disbands/{disbandId}`.replace(`{${"disbandId"}}`, encodeURIComponent(String(requestParameters.disbandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlarmFromJSON));
    }

    /**
     * Get alarms by date between and disband ID
     */
    async getAlarmsByDateBetweenAndDisbandId(minDate: number, maxDate: number, disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Alarm>> {
        const response = await this.getAlarmsByDateBetweenAndDisbandIdRaw({ minDate: minDate, maxDate: maxDate, disbandId: disbandId }, initOverrides);
        return await response.value();
    }

    /**
     * Get alarms by disband ID
     */
    async getAlarmsByDisbandIdRaw(requestParameters: GetAlarmsByDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Alarm>>> {
        if (requestParameters.disbandId === null || requestParameters.disbandId === undefined) {
            throw new runtime.RequiredError('disbandId','Required parameter requestParameters.disbandId was null or undefined when calling getAlarmsByDisbandId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alarms/disbands/{disbandId}`.replace(`{${"disbandId"}}`, encodeURIComponent(String(requestParameters.disbandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlarmFromJSON));
    }

    /**
     * Get alarms by disband ID
     */
    async getAlarmsByDisbandId(disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Alarm>> {
        const response = await this.getAlarmsByDisbandIdRaw({ disbandId: disbandId }, initOverrides);
        return await response.value();
    }

    /**
     * Get alarm by ID
     */
    async getById8Raw(requestParameters: GetById8Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Alarm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getById8.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alarms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlarmFromJSON(jsonValue));
    }

    /**
     * Get alarm by ID
     */
    async getById8(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Alarm> {
        const response = await this.getById8Raw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Save alarm
     */
    async saveAlarmRaw(requestParameters: SaveAlarmRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Alarm>> {
        if (requestParameters.alarmDTO === null || requestParameters.alarmDTO === undefined) {
            throw new runtime.RequiredError('alarmDTO','Required parameter requestParameters.alarmDTO was null or undefined when calling saveAlarm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alarms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlarmDTOToJSON(requestParameters.alarmDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlarmFromJSON(jsonValue));
    }

    /**
     * Save alarm
     */
    async saveAlarm(alarmDTO: AlarmDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Alarm> {
        const response = await this.saveAlarmRaw({ alarmDTO: alarmDTO }, initOverrides);
        return await response.value();
    }

    /**
     * Update alarm
     */
    async updateAlarmRaw(requestParameters: UpdateAlarmRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAlarm.');
        }

        if (requestParameters.alarmDTO === null || requestParameters.alarmDTO === undefined) {
            throw new runtime.RequiredError('alarmDTO','Required parameter requestParameters.alarmDTO was null or undefined when calling updateAlarm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alarms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AlarmDTOToJSON(requestParameters.alarmDTO),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update alarm
     */
    async updateAlarm(id: string, alarmDTO: AlarmDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
        const response = await this.updateAlarmRaw({ id: id, alarmDTO: alarmDTO }, initOverrides);
        return await response.value();
    }

}
