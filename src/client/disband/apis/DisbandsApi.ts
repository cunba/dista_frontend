/* tslint:disable */
/* eslint-disable */
/**
 * Disheap Service
 * Disheap API connection to Disbands and Disbeacs information
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Disband,
    DisbandFromJSON,
    DisbandToJSON,
    DisbandDTO,
    DisbandDTOFromJSON,
    DisbandDTOToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    HandledResponse,
    HandledResponseFromJSON,
    HandledResponseToJSON,
} from '../models';

export interface DeleteDisbandRequest {
    id: string;
}

export interface DeleteDisbandsByUserIdRequest {
    userId: string;
}

export interface GetById6Request {
    id: string;
}

export interface GetDisbandsByMacRequest {
    mac: string;
}

export interface GetDisbandsByUserIdRequest {
    userId: string;
}

export interface SavedisbandRequest {
    disbandDTO: DisbandDTO;
}

export interface UpdateDisbandRequest {
    id: string;
    disbandDTO: DisbandDTO;
}

export interface UpdateUserIdRequest {
    id: string;
    userId: string;
}

/**
 * DisbandsApi - interface
 * 
 * @export
 * @interface DisbandsApiInterface
 */
export interface DisbandsApiInterface {
    /**
     * 
     * @summary Delete disband
     * @param {string} id Disband id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbandsApiInterface
     */
    deleteDisbandRaw(requestParameters: DeleteDisbandRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disband>>;

    /**
     * Delete disband
     */
    deleteDisband(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disband>;

    /**
     * 
     * @summary Delete disbands by user ID
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbandsApiInterface
     */
    deleteDisbandsByUserIdRaw(requestParameters: DeleteDisbandsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disband>>>;

    /**
     * Delete disbands by user ID
     */
    deleteDisbandsByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disband>>;

    /**
     * 
     * @summary Get disband by ID
     * @param {string} id Disband ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbandsApiInterface
     */
    getById6Raw(requestParameters: GetById6Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disband>>;

    /**
     * Get disband by ID
     */
    getById6(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disband>;

    /**
     * 
     * @summary Get disbands by mac
     * @param {string} mac Mac
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbandsApiInterface
     */
    getDisbandsByMacRaw(requestParameters: GetDisbandsByMacRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disband>>>;

    /**
     * Get disbands by mac
     */
    getDisbandsByMac(mac: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disband>>;

    /**
     * 
     * @summary Get disbands by user ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbandsApiInterface
     */
    getDisbandsByUserIdRaw(requestParameters: GetDisbandsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disband>>>;

    /**
     * Get disbands by user ID
     */
    getDisbandsByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disband>>;

    /**
     * 
     * @summary Save disband
     * @param {DisbandDTO} disbandDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbandsApiInterface
     */
    savedisbandRaw(requestParameters: SavedisbandRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disband>>;

    /**
     * Save disband
     */
    savedisband(disbandDTO: DisbandDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disband>;

    /**
     * 
     * @summary Update disband
     * @param {string} id Disband id
     * @param {DisbandDTO} disbandDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbandsApiInterface
     */
    updateDisbandRaw(requestParameters: UpdateDisbandRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HandledResponse>>;

    /**
     * Update disband
     */
    updateDisband(id: string, disbandDTO: DisbandDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HandledResponse>;

    /**
     * 
     * @summary Update user ID
     * @param {string} id Disband ID
     * @param {string} userId New user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbandsApiInterface
     */
    updateUserIdRaw(requestParameters: UpdateUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HandledResponse>>;

    /**
     * Update user ID
     */
    updateUserId(id: string, userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HandledResponse>;

}

/**
 * 
 */
export class DisbandsApi extends runtime.BaseAPI implements DisbandsApiInterface {

    /**
     * Delete disband
     */
    async deleteDisbandRaw(requestParameters: DeleteDisbandRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disband>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDisband.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DisbandFromJSON(jsonValue));
    }

    /**
     * Delete disband
     */
    async deleteDisband(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disband> {
        const response = await this.deleteDisbandRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Delete disbands by user ID
     */
    async deleteDisbandsByUserIdRaw(requestParameters: DeleteDisbandsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disband>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteDisbandsByUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbands/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DisbandFromJSON));
    }

    /**
     * Delete disbands by user ID
     */
    async deleteDisbandsByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disband>> {
        const response = await this.deleteDisbandsByUserIdRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Get disband by ID
     */
    async getById6Raw(requestParameters: GetById6Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disband>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getById6.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DisbandFromJSON(jsonValue));
    }

    /**
     * Get disband by ID
     */
    async getById6(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disband> {
        const response = await this.getById6Raw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get disbands by mac
     */
    async getDisbandsByMacRaw(requestParameters: GetDisbandsByMacRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disband>>> {
        if (requestParameters.mac === null || requestParameters.mac === undefined) {
            throw new runtime.RequiredError('mac','Required parameter requestParameters.mac was null or undefined when calling getDisbandsByMac.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbands/macs/{mac}`.replace(`{${"mac"}}`, encodeURIComponent(String(requestParameters.mac))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DisbandFromJSON));
    }

    /**
     * Get disbands by mac
     */
    async getDisbandsByMac(mac: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disband>> {
        const response = await this.getDisbandsByMacRaw({ mac: mac }, initOverrides);
        return await response.value();
    }

    /**
     * Get disbands by user ID
     */
    async getDisbandsByUserIdRaw(requestParameters: GetDisbandsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disband>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getDisbandsByUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbands/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DisbandFromJSON));
    }

    /**
     * Get disbands by user ID
     */
    async getDisbandsByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disband>> {
        const response = await this.getDisbandsByUserIdRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Save disband
     */
    async savedisbandRaw(requestParameters: SavedisbandRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disband>> {
        if (requestParameters.disbandDTO === null || requestParameters.disbandDTO === undefined) {
            throw new runtime.RequiredError('disbandDTO','Required parameter requestParameters.disbandDTO was null or undefined when calling savedisband.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbands`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DisbandDTOToJSON(requestParameters.disbandDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DisbandFromJSON(jsonValue));
    }

    /**
     * Save disband
     */
    async savedisband(disbandDTO: DisbandDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disband> {
        const response = await this.savedisbandRaw({ disbandDTO: disbandDTO }, initOverrides);
        return await response.value();
    }

    /**
     * Update disband
     */
    async updateDisbandRaw(requestParameters: UpdateDisbandRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HandledResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDisband.');
        }

        if (requestParameters.disbandDTO === null || requestParameters.disbandDTO === undefined) {
            throw new runtime.RequiredError('disbandDTO','Required parameter requestParameters.disbandDTO was null or undefined when calling updateDisband.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DisbandDTOToJSON(requestParameters.disbandDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandledResponseFromJSON(jsonValue));
    }

    /**
     * Update disband
     */
    async updateDisband(id: string, disbandDTO: DisbandDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HandledResponse> {
        const response = await this.updateDisbandRaw({ id: id, disbandDTO: disbandDTO }, initOverrides);
        return await response.value();
    }

    /**
     * Update user ID
     */
    async updateUserIdRaw(requestParameters: UpdateUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HandledResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserId.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbands/{id}/user/{userId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandledResponseFromJSON(jsonValue));
    }

    /**
     * Update user ID
     */
    async updateUserId(id: string, userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HandledResponse> {
        const response = await this.updateUserIdRaw({ id: id, userId: userId }, initOverrides);
        return await response.value();
    }

}
