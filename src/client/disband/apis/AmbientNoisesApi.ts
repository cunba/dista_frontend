/* tslint:disable */
/* eslint-disable */
/**
 * Disheap Service
 * Disheap API connection to Disbands and Disbeacs information
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AmbientNoise,
    AmbientNoiseFromJSON,
    AmbientNoiseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MeasureDTO,
    MeasureDTOFromJSON,
    MeasureDTOToJSON,
} from '../models';

export interface DeleteAmbientNoisesByDisbandIdRequest {
    disbandId: string;
}

export interface GetAmbientNoisesByDateBetweenRequest {
    minDate: number;
    maxDate: number;
}

export interface GetAmbientNoisesByDateBetweenAndDisbandIdRequest {
    minDate: number;
    maxDate: number;
    disbandId: string;
}

export interface GetAmbientNoisesByDisbandIdRequest {
    disbandId: string;
}

export interface GetById7Request {
    id: string;
}

export interface GetLast1ByDisbandId6Request {
    minDate: number;
    maxDate: number;
    disbandId: string;
}

export interface SaveAmbientNoiseRequest {
    measureDTO: MeasureDTO;
}

/**
 * AmbientNoisesApi - interface
 * 
 * @export
 * @interface AmbientNoisesApiInterface
 */
export interface AmbientNoisesApiInterface {
    /**
     * 
     * @summary Delete ambient noises by disband ID
     * @param {string} disbandId Disband id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbientNoisesApiInterface
     */
    deleteAmbientNoisesByDisbandIdRaw(requestParameters: DeleteAmbientNoisesByDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AmbientNoise>>>;

    /**
     * Delete ambient noises by disband ID
     */
    deleteAmbientNoisesByDisbandId(disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AmbientNoise>>;

    /**
     * 
     * @summary Get all ambient noises
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbientNoisesApiInterface
     */
    getAllAmbientNoiseRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AmbientNoise>>>;

    /**
     * Get all ambient noises
     */
    getAllAmbientNoise(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AmbientNoise>>;

    /**
     * 
     * @summary Get ambient noises by date between
     * @param {number} minDate Min date
     * @param {number} maxDate Max date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbientNoisesApiInterface
     */
    getAmbientNoisesByDateBetweenRaw(requestParameters: GetAmbientNoisesByDateBetweenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AmbientNoise>>>;

    /**
     * Get ambient noises by date between
     */
    getAmbientNoisesByDateBetween(minDate: number, maxDate: number, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AmbientNoise>>;

    /**
     * 
     * @summary Get ambient noises by date between and disband ID
     * @param {number} minDate Min date
     * @param {number} maxDate Max date
     * @param {string} disbandId Disband ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbientNoisesApiInterface
     */
    getAmbientNoisesByDateBetweenAndDisbandIdRaw(requestParameters: GetAmbientNoisesByDateBetweenAndDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AmbientNoise>>>;

    /**
     * Get ambient noises by date between and disband ID
     */
    getAmbientNoisesByDateBetweenAndDisbandId(minDate: number, maxDate: number, disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AmbientNoise>>;

    /**
     * 
     * @summary Get Ambient noises by disband ID
     * @param {string} disbandId Disband ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbientNoisesApiInterface
     */
    getAmbientNoisesByDisbandIdRaw(requestParameters: GetAmbientNoisesByDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AmbientNoise>>>;

    /**
     * Get Ambient noises by disband ID
     */
    getAmbientNoisesByDisbandId(disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AmbientNoise>>;

    /**
     * 
     * @summary Get ambient noise by ID
     * @param {string} id Ambient noise ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbientNoisesApiInterface
     */
    getById7Raw(requestParameters: GetById7Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AmbientNoise>>;

    /**
     * Get ambient noise by ID
     */
    getById7(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AmbientNoise>;

    /**
     * 
     * @summary Get last ambient noise by disband ID
     * @param {number} minDate Min date
     * @param {number} maxDate Max date
     * @param {string} disbandId Disband ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbientNoisesApiInterface
     */
    getLast1ByDisbandId6Raw(requestParameters: GetLast1ByDisbandId6Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AmbientNoise>>;

    /**
     * Get last ambient noise by disband ID
     */
    getLast1ByDisbandId6(minDate: number, maxDate: number, disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AmbientNoise>;

    /**
     * 
     * @summary Save ambient noise
     * @param {MeasureDTO} measureDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbientNoisesApiInterface
     */
    saveAmbientNoiseRaw(requestParameters: SaveAmbientNoiseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AmbientNoise>>;

    /**
     * Save ambient noise
     */
    saveAmbientNoise(measureDTO: MeasureDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AmbientNoise>;

}

/**
 * 
 */
export class AmbientNoisesApi extends runtime.BaseAPI implements AmbientNoisesApiInterface {

    /**
     * Delete ambient noises by disband ID
     */
    async deleteAmbientNoisesByDisbandIdRaw(requestParameters: DeleteAmbientNoisesByDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AmbientNoise>>> {
        if (requestParameters.disbandId === null || requestParameters.disbandId === undefined) {
            throw new runtime.RequiredError('disbandId','Required parameter requestParameters.disbandId was null or undefined when calling deleteAmbientNoisesByDisbandId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ambient-noises/disbands/{disbandId}`.replace(`{${"disbandId"}}`, encodeURIComponent(String(requestParameters.disbandId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AmbientNoiseFromJSON));
    }

    /**
     * Delete ambient noises by disband ID
     */
    async deleteAmbientNoisesByDisbandId(disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AmbientNoise>> {
        const response = await this.deleteAmbientNoisesByDisbandIdRaw({ disbandId: disbandId }, initOverrides);
        return await response.value();
    }

    /**
     * Get all ambient noises
     */
    async getAllAmbientNoiseRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AmbientNoise>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ambient-noises`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AmbientNoiseFromJSON));
    }

    /**
     * Get all ambient noises
     */
    async getAllAmbientNoise(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AmbientNoise>> {
        const response = await this.getAllAmbientNoiseRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get ambient noises by date between
     */
    async getAmbientNoisesByDateBetweenRaw(requestParameters: GetAmbientNoisesByDateBetweenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AmbientNoise>>> {
        if (requestParameters.minDate === null || requestParameters.minDate === undefined) {
            throw new runtime.RequiredError('minDate','Required parameter requestParameters.minDate was null or undefined when calling getAmbientNoisesByDateBetween.');
        }

        if (requestParameters.maxDate === null || requestParameters.maxDate === undefined) {
            throw new runtime.RequiredError('maxDate','Required parameter requestParameters.maxDate was null or undefined when calling getAmbientNoisesByDateBetween.');
        }

        const queryParameters: any = {};

        if (requestParameters.minDate !== undefined) {
            queryParameters['min date'] = requestParameters.minDate;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['max date'] = requestParameters.maxDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ambient-noises/date/between`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AmbientNoiseFromJSON));
    }

    /**
     * Get ambient noises by date between
     */
    async getAmbientNoisesByDateBetween(minDate: number, maxDate: number, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AmbientNoise>> {
        const response = await this.getAmbientNoisesByDateBetweenRaw({ minDate: minDate, maxDate: maxDate }, initOverrides);
        return await response.value();
    }

    /**
     * Get ambient noises by date between and disband ID
     */
    async getAmbientNoisesByDateBetweenAndDisbandIdRaw(requestParameters: GetAmbientNoisesByDateBetweenAndDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AmbientNoise>>> {
        if (requestParameters.minDate === null || requestParameters.minDate === undefined) {
            throw new runtime.RequiredError('minDate','Required parameter requestParameters.minDate was null or undefined when calling getAmbientNoisesByDateBetweenAndDisbandId.');
        }

        if (requestParameters.maxDate === null || requestParameters.maxDate === undefined) {
            throw new runtime.RequiredError('maxDate','Required parameter requestParameters.maxDate was null or undefined when calling getAmbientNoisesByDateBetweenAndDisbandId.');
        }

        if (requestParameters.disbandId === null || requestParameters.disbandId === undefined) {
            throw new runtime.RequiredError('disbandId','Required parameter requestParameters.disbandId was null or undefined when calling getAmbientNoisesByDateBetweenAndDisbandId.');
        }

        const queryParameters: any = {};

        if (requestParameters.minDate !== undefined) {
            queryParameters['min date'] = requestParameters.minDate;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['max date'] = requestParameters.maxDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ambient-noises/date/between/disband/{disbandId}`.replace(`{${"disbandId"}}`, encodeURIComponent(String(requestParameters.disbandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AmbientNoiseFromJSON));
    }

    /**
     * Get ambient noises by date between and disband ID
     */
    async getAmbientNoisesByDateBetweenAndDisbandId(minDate: number, maxDate: number, disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AmbientNoise>> {
        const response = await this.getAmbientNoisesByDateBetweenAndDisbandIdRaw({ minDate: minDate, maxDate: maxDate, disbandId: disbandId }, initOverrides);
        return await response.value();
    }

    /**
     * Get Ambient noises by disband ID
     */
    async getAmbientNoisesByDisbandIdRaw(requestParameters: GetAmbientNoisesByDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AmbientNoise>>> {
        if (requestParameters.disbandId === null || requestParameters.disbandId === undefined) {
            throw new runtime.RequiredError('disbandId','Required parameter requestParameters.disbandId was null or undefined when calling getAmbientNoisesByDisbandId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ambient-noises/disbands/{disbandId}`.replace(`{${"disbandId"}}`, encodeURIComponent(String(requestParameters.disbandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AmbientNoiseFromJSON));
    }

    /**
     * Get Ambient noises by disband ID
     */
    async getAmbientNoisesByDisbandId(disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AmbientNoise>> {
        const response = await this.getAmbientNoisesByDisbandIdRaw({ disbandId: disbandId }, initOverrides);
        return await response.value();
    }

    /**
     * Get ambient noise by ID
     */
    async getById7Raw(requestParameters: GetById7Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AmbientNoise>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getById7.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ambient-noises/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmbientNoiseFromJSON(jsonValue));
    }

    /**
     * Get ambient noise by ID
     */
    async getById7(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AmbientNoise> {
        const response = await this.getById7Raw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get last ambient noise by disband ID
     */
    async getLast1ByDisbandId6Raw(requestParameters: GetLast1ByDisbandId6Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AmbientNoise>> {
        if (requestParameters.minDate === null || requestParameters.minDate === undefined) {
            throw new runtime.RequiredError('minDate','Required parameter requestParameters.minDate was null or undefined when calling getLast1ByDisbandId6.');
        }

        if (requestParameters.maxDate === null || requestParameters.maxDate === undefined) {
            throw new runtime.RequiredError('maxDate','Required parameter requestParameters.maxDate was null or undefined when calling getLast1ByDisbandId6.');
        }

        if (requestParameters.disbandId === null || requestParameters.disbandId === undefined) {
            throw new runtime.RequiredError('disbandId','Required parameter requestParameters.disbandId was null or undefined when calling getLast1ByDisbandId6.');
        }

        const queryParameters: any = {};

        if (requestParameters.minDate !== undefined) {
            queryParameters['min date'] = requestParameters.minDate;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['max date'] = requestParameters.maxDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ambient-noises/last/disbandId/{disbandId}`.replace(`{${"disbandId"}}`, encodeURIComponent(String(requestParameters.disbandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmbientNoiseFromJSON(jsonValue));
    }

    /**
     * Get last ambient noise by disband ID
     */
    async getLast1ByDisbandId6(minDate: number, maxDate: number, disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AmbientNoise> {
        const response = await this.getLast1ByDisbandId6Raw({ minDate: minDate, maxDate: maxDate, disbandId: disbandId }, initOverrides);
        return await response.value();
    }

    /**
     * Save ambient noise
     */
    async saveAmbientNoiseRaw(requestParameters: SaveAmbientNoiseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AmbientNoise>> {
        if (requestParameters.measureDTO === null || requestParameters.measureDTO === undefined) {
            throw new runtime.RequiredError('measureDTO','Required parameter requestParameters.measureDTO was null or undefined when calling saveAmbientNoise.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ambient-noises`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MeasureDTOToJSON(requestParameters.measureDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmbientNoiseFromJSON(jsonValue));
    }

    /**
     * Save ambient noise
     */
    async saveAmbientNoise(measureDTO: MeasureDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AmbientNoise> {
        const response = await this.saveAmbientNoiseRaw({ measureDTO: measureDTO }, initOverrides);
        return await response.value();
    }

}
