/* tslint:disable */
/* eslint-disable */
/**
 * Disheap Service
 * Disheap API connection to Disbands and Disbeacs information
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Lightning,
    LightningFromJSON,
    LightningToJSON,
    LightningDTO,
    LightningDTOFromJSON,
    LightningDTOToJSON,
} from '../models';

export interface DeleteLightningsByDisbandIdRequest {
    disbandId: string;
}

export interface GetLast1LightningByDateBetweenAndDisbandIdRequest {
    minDate: number;
    maxDate: number;
    disbandId: string;
}

export interface GetLightningByIdRequest {
    id: string;
}

export interface GetLightningsByDateBetweenRequest {
    minDate: number;
    maxDate: number;
}

export interface GetLightningsByDateBetweenAndDisbandIdRequest {
    minDate: number;
    maxDate: number;
    disbandId: string;
}

export interface GetLightningsByDisbandIdRequest {
    disbandId: string;
}

export interface SaveLightningRequest {
    lightningDTO: LightningDTO;
}

/**
 * LightningsApi - interface
 * 
 * @export
 * @interface LightningsApiInterface
 */
export interface LightningsApiInterface {
    /**
     * 
     * @summary Delete lightnings by disband ID
     * @param {string} disbandId Disband id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightningsApiInterface
     */
    deleteLightningsByDisbandIdRaw(requestParameters: DeleteLightningsByDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Lightning>>>;

    /**
     * Delete lightnings by disband ID
     */
    deleteLightningsByDisbandId(disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Lightning>>;

    /**
     * 
     * @summary Get all lightnings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightningsApiInterface
     */
    getAllLightningaRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Lightning>>>;

    /**
     * Get all lightnings
     */
    getAllLightninga(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Lightning>>;

    /**
     * 
     * @summary Get last lightning by disband ID
     * @param {number} minDate Min date
     * @param {number} maxDate Max date
     * @param {string} disbandId Disband ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightningsApiInterface
     */
    getLast1LightningByDateBetweenAndDisbandIdRaw(requestParameters: GetLast1LightningByDateBetweenAndDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Lightning>>;

    /**
     * Get last lightning by disband ID
     */
    getLast1LightningByDateBetweenAndDisbandId(minDate: number, maxDate: number, disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Lightning>;

    /**
     * 
     * @summary Get lightnint by ID
     * @param {string} id Lightnint ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightningsApiInterface
     */
    getLightningByIdRaw(requestParameters: GetLightningByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Lightning>>;

    /**
     * Get lightnint by ID
     */
    getLightningById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Lightning>;

    /**
     * 
     * @summary Get lightnings by date between
     * @param {number} minDate Min date
     * @param {number} maxDate Max date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightningsApiInterface
     */
    getLightningsByDateBetweenRaw(requestParameters: GetLightningsByDateBetweenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Lightning>>>;

    /**
     * Get lightnings by date between
     */
    getLightningsByDateBetween(minDate: number, maxDate: number, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Lightning>>;

    /**
     * 
     * @summary Get lightnings by date between and disband ID
     * @param {number} minDate Min date
     * @param {number} maxDate Max date
     * @param {string} disbandId Disband ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightningsApiInterface
     */
    getLightningsByDateBetweenAndDisbandIdRaw(requestParameters: GetLightningsByDateBetweenAndDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Lightning>>>;

    /**
     * Get lightnings by date between and disband ID
     */
    getLightningsByDateBetweenAndDisbandId(minDate: number, maxDate: number, disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Lightning>>;

    /**
     * 
     * @summary Get lightnings by disband ID
     * @param {string} disbandId Disband ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightningsApiInterface
     */
    getLightningsByDisbandIdRaw(requestParameters: GetLightningsByDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Lightning>>>;

    /**
     * Get lightnings by disband ID
     */
    getLightningsByDisbandId(disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Lightning>>;

    /**
     * 
     * @summary Save lightnint
     * @param {LightningDTO} lightningDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightningsApiInterface
     */
    saveLightningRaw(requestParameters: SaveLightningRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Lightning>>;

    /**
     * Save lightnint
     */
    saveLightning(lightningDTO: LightningDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Lightning>;

}

/**
 * 
 */
export class LightningsApi extends runtime.BaseAPI implements LightningsApiInterface {

    /**
     * Delete lightnings by disband ID
     */
    async deleteLightningsByDisbandIdRaw(requestParameters: DeleteLightningsByDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Lightning>>> {
        if (requestParameters.disbandId === null || requestParameters.disbandId === undefined) {
            throw new runtime.RequiredError('disbandId','Required parameter requestParameters.disbandId was null or undefined when calling deleteLightningsByDisbandId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lightnings/disbands/{disbandId}`.replace(`{${"disbandId"}}`, encodeURIComponent(String(requestParameters.disbandId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LightningFromJSON));
    }

    /**
     * Delete lightnings by disband ID
     */
    async deleteLightningsByDisbandId(disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Lightning>> {
        const response = await this.deleteLightningsByDisbandIdRaw({ disbandId: disbandId }, initOverrides);
        return await response.value();
    }

    /**
     * Get all lightnings
     */
    async getAllLightningaRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Lightning>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lightnings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LightningFromJSON));
    }

    /**
     * Get all lightnings
     */
    async getAllLightninga(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Lightning>> {
        const response = await this.getAllLightningaRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get last lightning by disband ID
     */
    async getLast1LightningByDateBetweenAndDisbandIdRaw(requestParameters: GetLast1LightningByDateBetweenAndDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Lightning>> {
        if (requestParameters.minDate === null || requestParameters.minDate === undefined) {
            throw new runtime.RequiredError('minDate','Required parameter requestParameters.minDate was null or undefined when calling getLast1LightningByDateBetweenAndDisbandId.');
        }

        if (requestParameters.maxDate === null || requestParameters.maxDate === undefined) {
            throw new runtime.RequiredError('maxDate','Required parameter requestParameters.maxDate was null or undefined when calling getLast1LightningByDateBetweenAndDisbandId.');
        }

        if (requestParameters.disbandId === null || requestParameters.disbandId === undefined) {
            throw new runtime.RequiredError('disbandId','Required parameter requestParameters.disbandId was null or undefined when calling getLast1LightningByDateBetweenAndDisbandId.');
        }

        const queryParameters: any = {};

        if (requestParameters.minDate !== undefined) {
            queryParameters['min date'] = requestParameters.minDate;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['max date'] = requestParameters.maxDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lightnings/last/disbandId/{disbandId}`.replace(`{${"disbandId"}}`, encodeURIComponent(String(requestParameters.disbandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LightningFromJSON(jsonValue));
    }

    /**
     * Get last lightning by disband ID
     */
    async getLast1LightningByDateBetweenAndDisbandId(minDate: number, maxDate: number, disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Lightning> {
        const response = await this.getLast1LightningByDateBetweenAndDisbandIdRaw({ minDate: minDate, maxDate: maxDate, disbandId: disbandId }, initOverrides);
        return await response.value();
    }

    /**
     * Get lightnint by ID
     */
    async getLightningByIdRaw(requestParameters: GetLightningByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Lightning>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLightningById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lightnings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LightningFromJSON(jsonValue));
    }

    /**
     * Get lightnint by ID
     */
    async getLightningById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Lightning> {
        const response = await this.getLightningByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get lightnings by date between
     */
    async getLightningsByDateBetweenRaw(requestParameters: GetLightningsByDateBetweenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Lightning>>> {
        if (requestParameters.minDate === null || requestParameters.minDate === undefined) {
            throw new runtime.RequiredError('minDate','Required parameter requestParameters.minDate was null or undefined when calling getLightningsByDateBetween.');
        }

        if (requestParameters.maxDate === null || requestParameters.maxDate === undefined) {
            throw new runtime.RequiredError('maxDate','Required parameter requestParameters.maxDate was null or undefined when calling getLightningsByDateBetween.');
        }

        const queryParameters: any = {};

        if (requestParameters.minDate !== undefined) {
            queryParameters['min date'] = requestParameters.minDate;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['max date'] = requestParameters.maxDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lightnings/date/between`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LightningFromJSON));
    }

    /**
     * Get lightnings by date between
     */
    async getLightningsByDateBetween(minDate: number, maxDate: number, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Lightning>> {
        const response = await this.getLightningsByDateBetweenRaw({ minDate: minDate, maxDate: maxDate }, initOverrides);
        return await response.value();
    }

    /**
     * Get lightnings by date between and disband ID
     */
    async getLightningsByDateBetweenAndDisbandIdRaw(requestParameters: GetLightningsByDateBetweenAndDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Lightning>>> {
        if (requestParameters.minDate === null || requestParameters.minDate === undefined) {
            throw new runtime.RequiredError('minDate','Required parameter requestParameters.minDate was null or undefined when calling getLightningsByDateBetweenAndDisbandId.');
        }

        if (requestParameters.maxDate === null || requestParameters.maxDate === undefined) {
            throw new runtime.RequiredError('maxDate','Required parameter requestParameters.maxDate was null or undefined when calling getLightningsByDateBetweenAndDisbandId.');
        }

        if (requestParameters.disbandId === null || requestParameters.disbandId === undefined) {
            throw new runtime.RequiredError('disbandId','Required parameter requestParameters.disbandId was null or undefined when calling getLightningsByDateBetweenAndDisbandId.');
        }

        const queryParameters: any = {};

        if (requestParameters.minDate !== undefined) {
            queryParameters['min date'] = requestParameters.minDate;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['max date'] = requestParameters.maxDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lightnings/date/between/disband/{disbandId}`.replace(`{${"disbandId"}}`, encodeURIComponent(String(requestParameters.disbandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LightningFromJSON));
    }

    /**
     * Get lightnings by date between and disband ID
     */
    async getLightningsByDateBetweenAndDisbandId(minDate: number, maxDate: number, disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Lightning>> {
        const response = await this.getLightningsByDateBetweenAndDisbandIdRaw({ minDate: minDate, maxDate: maxDate, disbandId: disbandId }, initOverrides);
        return await response.value();
    }

    /**
     * Get lightnings by disband ID
     */
    async getLightningsByDisbandIdRaw(requestParameters: GetLightningsByDisbandIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Lightning>>> {
        if (requestParameters.disbandId === null || requestParameters.disbandId === undefined) {
            throw new runtime.RequiredError('disbandId','Required parameter requestParameters.disbandId was null or undefined when calling getLightningsByDisbandId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lightnings/disbands/{disbandId}`.replace(`{${"disbandId"}}`, encodeURIComponent(String(requestParameters.disbandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LightningFromJSON));
    }

    /**
     * Get lightnings by disband ID
     */
    async getLightningsByDisbandId(disbandId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Lightning>> {
        const response = await this.getLightningsByDisbandIdRaw({ disbandId: disbandId }, initOverrides);
        return await response.value();
    }

    /**
     * Save lightnint
     */
    async saveLightningRaw(requestParameters: SaveLightningRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Lightning>> {
        if (requestParameters.lightningDTO === null || requestParameters.lightningDTO === undefined) {
            throw new runtime.RequiredError('lightningDTO','Required parameter requestParameters.lightningDTO was null or undefined when calling saveLightning.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lightnings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LightningDTOToJSON(requestParameters.lightningDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LightningFromJSON(jsonValue));
    }

    /**
     * Save lightnint
     */
    async saveLightning(lightningDTO: LightningDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Lightning> {
        const response = await this.saveLightningRaw({ lightningDTO: lightningDTO }, initOverrides);
        return await response.value();
    }

}
