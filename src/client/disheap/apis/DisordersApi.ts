/* tslint:disable */
/* eslint-disable */
/**
 * Disheap Service
 * Disheap API connection to Disbands and Disbeacs information
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Disorder,
    DisorderFromJSON,
    DisorderToJSON,
    DisorderDTO,
    DisorderDTOFromJSON,
    DisorderDTOToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface DeleteDisorderRequest {
    id: string;
}

export interface GetDisorderByIdRequest {
    id: string;
}

export interface SaveDisorderRequest {
    disorderDTO: DisorderDTO;
}

export interface UpdateDisorderRequest {
    id: string;
    disorderDTO: DisorderDTO;
}

/**
 * DisordersApi - interface
 * 
 * @export
 * @interface DisordersApiInterface
 */
export interface DisordersApiInterface {
    /**
     * 
     * @summary Delete all disorders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisordersApiInterface
     */
    deleteAllDisordersRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disorder>>>;

    /**
     * Delete all disorders
     */
    deleteAllDisorders(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disorder>>;

    /**
     * 
     * @summary Delete disorder
     * @param {string} id Disorder ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisordersApiInterface
     */
    deleteDisorderRaw(requestParameters: DeleteDisorderRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disorder>>;

    /**
     * Delete disorder
     */
    deleteDisorder(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disorder>;

    /**
     * 
     * @summary Get all disorders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisordersApiInterface
     */
    getAllDisordersRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disorder>>>;

    /**
     * Get all disorders
     */
    getAllDisorders(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disorder>>;

    /**
     * 
     * @summary Get disorder by ID
     * @param {string} id Disorder ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisordersApiInterface
     */
    getDisorderByIdRaw(requestParameters: GetDisorderByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disorder>>;

    /**
     * Get disorder by ID
     */
    getDisorderById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disorder>;

    /**
     * 
     * @summary Save disorder
     * @param {DisorderDTO} disorderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisordersApiInterface
     */
    saveDisorderRaw(requestParameters: SaveDisorderRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disorder>>;

    /**
     * Save disorder
     */
    saveDisorder(disorderDTO: DisorderDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disorder>;

    /**
     * 
     * @summary Update disorder
     * @param {string} id Disorder id
     * @param {DisorderDTO} disorderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisordersApiInterface
     */
    updateDisorderRaw(requestParameters: UpdateDisorderRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Update disorder
     */
    updateDisorder(id: string, disorderDTO: DisorderDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string>;

}

/**
 * 
 */
export class DisordersApi extends runtime.BaseAPI implements DisordersApiInterface {

    /**
     * Delete all disorders
     */
    async deleteAllDisordersRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disorder>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disorders`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DisorderFromJSON));
    }

    /**
     * Delete all disorders
     */
    async deleteAllDisorders(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disorder>> {
        const response = await this.deleteAllDisordersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete disorder
     */
    async deleteDisorderRaw(requestParameters: DeleteDisorderRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disorder>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDisorder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disorders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DisorderFromJSON(jsonValue));
    }

    /**
     * Delete disorder
     */
    async deleteDisorder(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disorder> {
        const response = await this.deleteDisorderRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get all disorders
     */
    async getAllDisordersRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disorder>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/disorders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DisorderFromJSON));
    }

    /**
     * Get all disorders
     */
    async getAllDisorders(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disorder>> {
        const response = await this.getAllDisordersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get disorder by ID
     */
    async getDisorderByIdRaw(requestParameters: GetDisorderByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disorder>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDisorderById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disorders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DisorderFromJSON(jsonValue));
    }

    /**
     * Get disorder by ID
     */
    async getDisorderById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disorder> {
        const response = await this.getDisorderByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Save disorder
     */
    async saveDisorderRaw(requestParameters: SaveDisorderRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disorder>> {
        if (requestParameters.disorderDTO === null || requestParameters.disorderDTO === undefined) {
            throw new runtime.RequiredError('disorderDTO','Required parameter requestParameters.disorderDTO was null or undefined when calling saveDisorder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disorders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DisorderDTOToJSON(requestParameters.disorderDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DisorderFromJSON(jsonValue));
    }

    /**
     * Save disorder
     */
    async saveDisorder(disorderDTO: DisorderDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disorder> {
        const response = await this.saveDisorderRaw({ disorderDTO: disorderDTO }, initOverrides);
        return await response.value();
    }

    /**
     * Update disorder
     */
    async updateDisorderRaw(requestParameters: UpdateDisorderRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDisorder.');
        }

        if (requestParameters.disorderDTO === null || requestParameters.disorderDTO === undefined) {
            throw new runtime.RequiredError('disorderDTO','Required parameter requestParameters.disorderDTO was null or undefined when calling updateDisorder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disorders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DisorderDTOToJSON(requestParameters.disorderDTO),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update disorder
     */
    async updateDisorder(id: string, disorderDTO: DisorderDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
        const response = await this.updateDisorderRaw({ id: id, disorderDTO: disorderDTO }, initOverrides);
        return await response.value();
    }

}
