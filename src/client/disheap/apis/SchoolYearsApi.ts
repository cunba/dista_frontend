/* tslint:disable */
/* eslint-disable */
/**
 * Disheap Service
 * Disheap API connection to Disbands and Disbeacs information
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SchoolYear,
    SchoolYearFromJSON,
    SchoolYearToJSON,
    SchoolYearDTO,
    SchoolYearDTOFromJSON,
    SchoolYearDTOToJSON,
} from '../models';

export interface DeleteSchoolYearRequest {
    id: string;
}

export interface GetSchoolYearByIdRequest {
    id: string;
}

export interface SaveSchoolYearRequest {
    schoolYearDTO: SchoolYearDTO;
}

export interface UpdateSchoolYearRequest {
    id: string;
    schoolYearDTO: SchoolYearDTO;
}

/**
 * SchoolYearsApi - interface
 * 
 * @export
 * @interface SchoolYearsApiInterface
 */
export interface SchoolYearsApiInterface {
    /**
     * 
     * @summary Delete all school years
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolYearsApiInterface
     */
    deleteAllSchoolYearsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<SchoolYear>>>;

    /**
     * Delete all school years
     */
    deleteAllSchoolYears(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<SchoolYear>>;

    /**
     * 
     * @summary Delete school year
     * @param {string} id School year ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolYearsApiInterface
     */
    deleteSchoolYearRaw(requestParameters: DeleteSchoolYearRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SchoolYear>>;

    /**
     * Delete school year
     */
    deleteSchoolYear(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SchoolYear>;

    /**
     * 
     * @summary Get all school years
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolYearsApiInterface
     */
    getAllSchoolYearsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<SchoolYear>>>;

    /**
     * Get all school years
     */
    getAllSchoolYears(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<SchoolYear>>;

    /**
     * 
     * @summary Get school year by ID
     * @param {string} id School year ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolYearsApiInterface
     */
    getSchoolYearByIdRaw(requestParameters: GetSchoolYearByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SchoolYear>>;

    /**
     * Get school year by ID
     */
    getSchoolYearById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SchoolYear>;

    /**
     * 
     * @summary Save school year
     * @param {SchoolYearDTO} schoolYearDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolYearsApiInterface
     */
    saveSchoolYearRaw(requestParameters: SaveSchoolYearRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SchoolYear>>;

    /**
     * Save school year
     */
    saveSchoolYear(schoolYearDTO: SchoolYearDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SchoolYear>;

    /**
     * 
     * @summary Update school year
     * @param {string} id School year id
     * @param {SchoolYearDTO} schoolYearDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolYearsApiInterface
     */
    updateSchoolYearRaw(requestParameters: UpdateSchoolYearRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Update school year
     */
    updateSchoolYear(id: string, schoolYearDTO: SchoolYearDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string>;

}

/**
 * 
 */
export class SchoolYearsApi extends runtime.BaseAPI implements SchoolYearsApiInterface {

    /**
     * Delete all school years
     */
    async deleteAllSchoolYearsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<SchoolYear>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/school-years`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SchoolYearFromJSON));
    }

    /**
     * Delete all school years
     */
    async deleteAllSchoolYears(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<SchoolYear>> {
        const response = await this.deleteAllSchoolYearsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete school year
     */
    async deleteSchoolYearRaw(requestParameters: DeleteSchoolYearRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SchoolYear>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSchoolYear.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/school-years/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolYearFromJSON(jsonValue));
    }

    /**
     * Delete school year
     */
    async deleteSchoolYear(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SchoolYear> {
        const response = await this.deleteSchoolYearRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get all school years
     */
    async getAllSchoolYearsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<SchoolYear>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/school-years`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SchoolYearFromJSON));
    }

    /**
     * Get all school years
     */
    async getAllSchoolYears(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<SchoolYear>> {
        const response = await this.getAllSchoolYearsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get school year by ID
     */
    async getSchoolYearByIdRaw(requestParameters: GetSchoolYearByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SchoolYear>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSchoolYearById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/school-years/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolYearFromJSON(jsonValue));
    }

    /**
     * Get school year by ID
     */
    async getSchoolYearById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SchoolYear> {
        const response = await this.getSchoolYearByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Save school year
     */
    async saveSchoolYearRaw(requestParameters: SaveSchoolYearRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SchoolYear>> {
        if (requestParameters.schoolYearDTO === null || requestParameters.schoolYearDTO === undefined) {
            throw new runtime.RequiredError('schoolYearDTO','Required parameter requestParameters.schoolYearDTO was null or undefined when calling saveSchoolYear.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/school-years`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchoolYearDTOToJSON(requestParameters.schoolYearDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolYearFromJSON(jsonValue));
    }

    /**
     * Save school year
     */
    async saveSchoolYear(schoolYearDTO: SchoolYearDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SchoolYear> {
        const response = await this.saveSchoolYearRaw({ schoolYearDTO: schoolYearDTO }, initOverrides);
        return await response.value();
    }

    /**
     * Update school year
     */
    async updateSchoolYearRaw(requestParameters: UpdateSchoolYearRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSchoolYear.');
        }

        if (requestParameters.schoolYearDTO === null || requestParameters.schoolYearDTO === undefined) {
            throw new runtime.RequiredError('schoolYearDTO','Required parameter requestParameters.schoolYearDTO was null or undefined when calling updateSchoolYear.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/school-years/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SchoolYearDTOToJSON(requestParameters.schoolYearDTO),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update school year
     */
    async updateSchoolYear(id: string, schoolYearDTO: SchoolYearDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
        const response = await this.updateSchoolYearRaw({ id: id, schoolYearDTO: schoolYearDTO }, initOverrides);
        return await response.value();
    }

}
