/* tslint:disable */
/* eslint-disable */
/**
 * Disheap Service
 * Disheap API connection to Disbands and Disbeacs information
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Event,
    EventFromJSON,
    EventToJSON,
    EventDTO,
    EventDTOFromJSON,
    EventDTOToJSON,
} from '../models';

export interface DeleteEventRequest {
    id: string;
}

export interface DeleteEventsByUserIdRequest {
    userId: string;
}

export interface GetEventByIdRequest {
    id: string;
}

export interface GetEventsByDateBetweenAndUserIdRequest {
    minDate: number;
    maxDate: number;
    userId: string;
}

export interface GetEventsByTypeAndUserIdRequest {
    type: string;
    userId: string;
}

export interface GetEventsByUserIdRequest {
    userId: string;
}

export interface SaveEventRequest {
    eventDTO: EventDTO;
}

export interface UpdateEventRequest {
    id: string;
    eventDTO: EventDTO;
}

/**
 * EventsApi - interface
 * 
 * @export
 * @interface EventsApiInterface
 */
export interface EventsApiInterface {
    /**
     * 
     * @summary Delete event
     * @param {string} id Event ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    deleteEventRaw(requestParameters: DeleteEventRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Event>>;

    /**
     * Delete event
     */
    deleteEvent(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Event>;

    /**
     * 
     * @summary Delete events by user ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    deleteEventsByUserIdRaw(requestParameters: DeleteEventsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Event>>>;

    /**
     * Delete events by user ID
     */
    deleteEventsByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Event>>;

    /**
     * 
     * @summary Get event by ID
     * @param {string} id Event ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    getEventByIdRaw(requestParameters: GetEventByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Event>>;

    /**
     * Get event by ID
     */
    getEventById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Event>;

    /**
     * 
     * @summary Get events by date between and user ID
     * @param {number} minDate Min date
     * @param {number} maxDate Max date
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    getEventsByDateBetweenAndUserIdRaw(requestParameters: GetEventsByDateBetweenAndUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Event>>>;

    /**
     * Get events by date between and user ID
     */
    getEventsByDateBetweenAndUserId(minDate: number, maxDate: number, userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Event>>;

    /**
     * 
     * @summary Get events by type and user ID
     * @param {string} type Type
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    getEventsByTypeAndUserIdRaw(requestParameters: GetEventsByTypeAndUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Event>>>;

    /**
     * Get events by type and user ID
     */
    getEventsByTypeAndUserId(type: string, userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Event>>;

    /**
     * 
     * @summary Get events by user ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    getEventsByUserIdRaw(requestParameters: GetEventsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Event>>>;

    /**
     * Get events by user ID
     */
    getEventsByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Event>>;

    /**
     * 
     * @summary Save event
     * @param {EventDTO} eventDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    saveEventRaw(requestParameters: SaveEventRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Event>>;

    /**
     * Save event
     */
    saveEvent(eventDTO: EventDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Event>;

    /**
     * 
     * @summary Update event
     * @param {string} id Event id
     * @param {EventDTO} eventDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    updateEventRaw(requestParameters: UpdateEventRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Update event
     */
    updateEvent(id: string, eventDTO: EventDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string>;

}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI implements EventsApiInterface {

    /**
     * Delete event
     */
    async deleteEventRaw(requestParameters: DeleteEventRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Delete event
     */
    async deleteEvent(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Event> {
        const response = await this.deleteEventRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Delete events by user ID
     */
    async deleteEventsByUserIdRaw(requestParameters: DeleteEventsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Event>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteEventsByUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/events/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * Delete events by user ID
     */
    async deleteEventsByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Event>> {
        const response = await this.deleteEventsByUserIdRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Get event by ID
     */
    async getEventByIdRaw(requestParameters: GetEventByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEventById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Get event by ID
     */
    async getEventById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Event> {
        const response = await this.getEventByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get events by date between and user ID
     */
    async getEventsByDateBetweenAndUserIdRaw(requestParameters: GetEventsByDateBetweenAndUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Event>>> {
        if (requestParameters.minDate === null || requestParameters.minDate === undefined) {
            throw new runtime.RequiredError('minDate','Required parameter requestParameters.minDate was null or undefined when calling getEventsByDateBetweenAndUserId.');
        }

        if (requestParameters.maxDate === null || requestParameters.maxDate === undefined) {
            throw new runtime.RequiredError('maxDate','Required parameter requestParameters.maxDate was null or undefined when calling getEventsByDateBetweenAndUserId.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getEventsByDateBetweenAndUserId.');
        }

        const queryParameters: any = {};

        if (requestParameters.minDate !== undefined) {
            queryParameters['min date'] = requestParameters.minDate;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['max date'] = requestParameters.maxDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/events/date/between/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
console.log(response)
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * Get events by date between and user ID
     */
    async getEventsByDateBetweenAndUserId(minDate: number, maxDate: number, userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Event>> {
        const response = await this.getEventsByDateBetweenAndUserIdRaw({ minDate: minDate, maxDate: maxDate, userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Get events by type and user ID
     */
    async getEventsByTypeAndUserIdRaw(requestParameters: GetEventsByTypeAndUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Event>>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getEventsByTypeAndUserId.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getEventsByTypeAndUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/events/types/{type}/users/{userId}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * Get events by type and user ID
     */
    async getEventsByTypeAndUserId(type: string, userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Event>> {
        const response = await this.getEventsByTypeAndUserIdRaw({ type: type, userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Get events by user ID
     */
    async getEventsByUserIdRaw(requestParameters: GetEventsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Event>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getEventsByUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/events/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * Get events by user ID
     */
    async getEventsByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Event>> {
        const response = await this.getEventsByUserIdRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Save event
     */
    async saveEventRaw(requestParameters: SaveEventRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters.eventDTO === null || requestParameters.eventDTO === undefined) {
            throw new runtime.RequiredError('eventDTO','Required parameter requestParameters.eventDTO was null or undefined when calling saveEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventDTOToJSON(requestParameters.eventDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Save event
     */
    async saveEvent(eventDTO: EventDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Event> {
        const response = await this.saveEventRaw({ eventDTO: eventDTO }, initOverrides);
        return await response.value();
    }

    /**
     * Update event
     */
    async updateEventRaw(requestParameters: UpdateEventRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEvent.');
        }

        if (requestParameters.eventDTO === null || requestParameters.eventDTO === undefined) {
            throw new runtime.RequiredError('eventDTO','Required parameter requestParameters.eventDTO was null or undefined when calling updateEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventDTOToJSON(requestParameters.eventDTO),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update event
     */
    async updateEvent(id: string, eventDTO: EventDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
        const response = await this.updateEventRaw({ id: id, eventDTO: eventDTO }, initOverrides);
        return await response.value();
    }

}
