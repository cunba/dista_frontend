/* tslint:disable */
/* eslint-disable */
/**
 * Disheap Service
 * Disheap API connection to Disbands and Disbeacs information
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Timetable,
    TimetableFromJSON,
    TimetableToJSON,
    TimetableDTO,
    TimetableDTOFromJSON,
    TimetableDTOToJSON,
} from '../models';

export interface DeleteTimetableRequest {
    id: string;
}

export interface DeleteTimetablesByUserIdRequest {
    userId: string;
}

export interface GetTimetableByIdRequest {
    id: string;
}

export interface GetTimetablesByUserIdRequest {
    userId: string;
}

export interface SaveTimetableRequest {
    timetableDTO: TimetableDTO;
}

export interface UpdateTimetableRequest {
    id: string;
    timetableDTO: TimetableDTO;
}

/**
 * TimetablesApi - interface
 * 
 * @export
 * @interface TimetablesApiInterface
 */
export interface TimetablesApiInterface {
    /**
     * 
     * @summary Delete timetable
     * @param {string} id Timetable ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimetablesApiInterface
     */
    deleteTimetableRaw(requestParameters: DeleteTimetableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Timetable>>;

    /**
     * Delete timetable
     */
    deleteTimetable(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Timetable>;

    /**
     * 
     * @summary Delete timetables by user ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimetablesApiInterface
     */
    deleteTimetablesByUserIdRaw(requestParameters: DeleteTimetablesByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Timetable>>>;

    /**
     * Delete timetables by user ID
     */
    deleteTimetablesByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Timetable>>;

    /**
     * 
     * @summary Get timetable by ID
     * @param {string} id Timetable ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimetablesApiInterface
     */
    getTimetableByIdRaw(requestParameters: GetTimetableByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Timetable>>;

    /**
     * Get timetable by ID
     */
    getTimetableById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Timetable>;

    /**
     * 
     * @summary Get timetables by user ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimetablesApiInterface
     */
    getTimetablesByUserIdRaw(requestParameters: GetTimetablesByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Timetable>>>;

    /**
     * Get timetables by user ID
     */
    getTimetablesByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Timetable>>;

    /**
     * 
     * @summary Save timetable
     * @param {TimetableDTO} timetableDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimetablesApiInterface
     */
    saveTimetableRaw(requestParameters: SaveTimetableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Timetable>>;

    /**
     * Save timetable
     */
    saveTimetable(timetableDTO: TimetableDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Timetable>;

    /**
     * 
     * @summary Update timetable
     * @param {string} id Timetable id
     * @param {TimetableDTO} timetableDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimetablesApiInterface
     */
    updateTimetableRaw(requestParameters: UpdateTimetableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Update timetable
     */
    updateTimetable(id: string, timetableDTO: TimetableDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string>;

}

/**
 * 
 */
export class TimetablesApi extends runtime.BaseAPI implements TimetablesApiInterface {

    /**
     * Delete timetable
     */
    async deleteTimetableRaw(requestParameters: DeleteTimetableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Timetable>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTimetable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/timetables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimetableFromJSON(jsonValue));
    }

    /**
     * Delete timetable
     */
    async deleteTimetable(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Timetable> {
        const response = await this.deleteTimetableRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Delete timetables by user ID
     */
    async deleteTimetablesByUserIdRaw(requestParameters: DeleteTimetablesByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Timetable>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteTimetablesByUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/timetables/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimetableFromJSON));
    }

    /**
     * Delete timetables by user ID
     */
    async deleteTimetablesByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Timetable>> {
        const response = await this.deleteTimetablesByUserIdRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Get timetable by ID
     */
    async getTimetableByIdRaw(requestParameters: GetTimetableByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Timetable>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTimetableById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/timetables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimetableFromJSON(jsonValue));
    }

    /**
     * Get timetable by ID
     */
    async getTimetableById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Timetable> {
        const response = await this.getTimetableByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get timetables by user ID
     */
    async getTimetablesByUserIdRaw(requestParameters: GetTimetablesByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Timetable>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getTimetablesByUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/timetables/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimetableFromJSON));
    }

    /**
     * Get timetables by user ID
     */
    async getTimetablesByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Timetable>> {
        const response = await this.getTimetablesByUserIdRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Save timetable
     */
    async saveTimetableRaw(requestParameters: SaveTimetableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Timetable>> {
        if (requestParameters.timetableDTO === null || requestParameters.timetableDTO === undefined) {
            throw new runtime.RequiredError('timetableDTO','Required parameter requestParameters.timetableDTO was null or undefined when calling saveTimetable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/timetables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimetableDTOToJSON(requestParameters.timetableDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimetableFromJSON(jsonValue));
    }

    /**
     * Save timetable
     */
    async saveTimetable(timetableDTO: TimetableDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Timetable> {
        const response = await this.saveTimetableRaw({ timetableDTO: timetableDTO }, initOverrides);
        return await response.value();
    }

    /**
     * Update timetable
     */
    async updateTimetableRaw(requestParameters: UpdateTimetableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTimetable.');
        }

        if (requestParameters.timetableDTO === null || requestParameters.timetableDTO === undefined) {
            throw new runtime.RequiredError('timetableDTO','Required parameter requestParameters.timetableDTO was null or undefined when calling updateTimetable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/timetables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TimetableDTOToJSON(requestParameters.timetableDTO),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update timetable
     */
    async updateTimetable(id: string, timetableDTO: TimetableDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
        const response = await this.updateTimetableRaw({ id: id, timetableDTO: timetableDTO }, initOverrides);
        return await response.value();
    }

}
