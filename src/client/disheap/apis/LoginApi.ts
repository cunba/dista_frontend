/* tslint:disable */
/* eslint-disable */
/**
 * Disheap Service
 * Disheap API connection to Disbands and Disbeacs information
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    JwtRequest,
    JwtRequestFromJSON,
    JwtRequestToJSON,
    JwtResponse,
    JwtResponseFromJSON,
    JwtResponseToJSON,
} from '../models';

export interface LoginRequest {
    jwtRequest: JwtRequest;
}

/**
 * LoginApi - interface
 * 
 * @export
 * @interface LoginApiInterface
 */
export interface LoginApiInterface {
    /**
     * 
     * @summary Login
     * @param {JwtRequest} jwtRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApiInterface
     */
    loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<JwtResponse>>;

    /**
     * Login
     */
    login(jwtRequest: JwtRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<JwtResponse>;

}

/**
 * 
 */
export class LoginApi extends runtime.BaseAPI implements LoginApiInterface {

    /**
     * Login
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<JwtResponse>> {
        if (requestParameters.jwtRequest === null || requestParameters.jwtRequest === undefined) {
            throw new runtime.RequiredError('jwtRequest','Required parameter requestParameters.jwtRequest was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JwtRequestToJSON(requestParameters.jwtRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtResponseFromJSON(jsonValue));
    }

    /**
     * Login
     */
    async login(jwtRequest: JwtRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<JwtResponse> {
        const response = await this.loginRaw({ jwtRequest: jwtRequest }, initOverrides);
        return await response.value();
    }

}
