/* tslint:disable */
/* eslint-disable */
/**
 * Disheap Service
 * Disheap API connection to Disbands and Disbeacs information
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Disbeac,
    DisbeacFromJSON,
    DisbeacToJSON,
    DisbeacDTO,
    DisbeacDTOFromJSON,
    DisbeacDTOToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    HandledResponse,
    HandledResponseFromJSON,
    HandledResponseToJSON,
} from '../models';

export interface DeleteDisbeacRequest {
    id: string;
}

export interface DeleteDisbeacsByUserIdRequest {
    userId: string;
}

export interface GetDisbeacByIdRequest {
    id: string;
}

export interface GetDisbeacByMacRequest {
    mac: string;
}

export interface GetDisbeacsByUserIdRequest {
    userId: string;
}

export interface SaveDisbeacRequest {
    disbeacDTO: DisbeacDTO;
}

export interface UpdateDisbeacRequest {
    id: string;
    disbeacDTO: DisbeacDTO;
}

export interface UpdateDisbeacUserIdRequest {
    id: string;
    userId: string;
}

/**
 * DisbeacsApi - interface
 * 
 * @export
 * @interface DisbeacsApiInterface
 */
export interface DisbeacsApiInterface {
    /**
     * 
     * @summary Delete disbeac
     * @param {string} id Disbeac id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbeacsApiInterface
     */
    deleteDisbeacRaw(requestParameters: DeleteDisbeacRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disbeac>>;

    /**
     * Delete disbeac
     */
    deleteDisbeac(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disbeac>;

    /**
     * 
     * @summary Delete disbeacs by user ID
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbeacsApiInterface
     */
    deleteDisbeacsByUserIdRaw(requestParameters: DeleteDisbeacsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disbeac>>>;

    /**
     * Delete disbeacs by user ID
     */
    deleteDisbeacsByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disbeac>>;

    /**
     * 
     * @summary Get disbeac by ID
     * @param {string} id Disbeac ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbeacsApiInterface
     */
    getDisbeacByIdRaw(requestParameters: GetDisbeacByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disbeac>>;

    /**
     * Get disbeac by ID
     */
    getDisbeacById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disbeac>;

    /**
     * 
     * @summary Get disbeac by mac
     * @param {string} mac Mac
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbeacsApiInterface
     */
    getDisbeacByMacRaw(requestParameters: GetDisbeacByMacRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disbeac>>;

    /**
     * Get disbeac by mac
     */
    getDisbeacByMac(mac: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disbeac>;

    /**
     * 
     * @summary Get disbeacs by user ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbeacsApiInterface
     */
    getDisbeacsByUserIdRaw(requestParameters: GetDisbeacsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disbeac>>>;

    /**
     * Get disbeacs by user ID
     */
    getDisbeacsByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disbeac>>;

    /**
     * 
     * @summary Save disbeac
     * @param {DisbeacDTO} disbeacDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbeacsApiInterface
     */
    saveDisbeacRaw(requestParameters: SaveDisbeacRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disbeac>>;

    /**
     * Save disbeac
     */
    saveDisbeac(disbeacDTO: DisbeacDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disbeac>;

    /**
     * 
     * @summary Update disbeac
     * @param {string} id Disbeac id
     * @param {DisbeacDTO} disbeacDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbeacsApiInterface
     */
    updateDisbeacRaw(requestParameters: UpdateDisbeacRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HandledResponse>>;

    /**
     * Update disbeac
     */
    updateDisbeac(id: string, disbeacDTO: DisbeacDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HandledResponse>;

    /**
     * 
     * @summary Update user ID
     * @param {string} id Disbeac ID
     * @param {string} userId New user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbeacsApiInterface
     */
    updateDisbeacUserIdRaw(requestParameters: UpdateDisbeacUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HandledResponse>>;

    /**
     * Update user ID
     */
    updateDisbeacUserId(id: string, userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HandledResponse>;

}

/**
 * 
 */
export class DisbeacsApi extends runtime.BaseAPI implements DisbeacsApiInterface {

    /**
     * Delete disbeac
     */
    async deleteDisbeacRaw(requestParameters: DeleteDisbeacRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disbeac>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDisbeac.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbeacs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DisbeacFromJSON(jsonValue));
    }

    /**
     * Delete disbeac
     */
    async deleteDisbeac(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disbeac> {
        const response = await this.deleteDisbeacRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Delete disbeacs by user ID
     */
    async deleteDisbeacsByUserIdRaw(requestParameters: DeleteDisbeacsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disbeac>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteDisbeacsByUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbeacs/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DisbeacFromJSON));
    }

    /**
     * Delete disbeacs by user ID
     */
    async deleteDisbeacsByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disbeac>> {
        const response = await this.deleteDisbeacsByUserIdRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Get disbeac by ID
     */
    async getDisbeacByIdRaw(requestParameters: GetDisbeacByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disbeac>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDisbeacById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbeacs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DisbeacFromJSON(jsonValue));
    }

    /**
     * Get disbeac by ID
     */
    async getDisbeacById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disbeac> {
        const response = await this.getDisbeacByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get disbeac by mac
     */
    async getDisbeacByMacRaw(requestParameters: GetDisbeacByMacRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disbeac>> {
        if (requestParameters.mac === null || requestParameters.mac === undefined) {
            throw new runtime.RequiredError('mac','Required parameter requestParameters.mac was null or undefined when calling getDisbeacByMac.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbeacs/macs/{mac}`.replace(`{${"mac"}}`, encodeURIComponent(String(requestParameters.mac))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DisbeacFromJSON(jsonValue));
    }

    /**
     * Get disbeac by mac
     */
    async getDisbeacByMac(mac: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disbeac> {
        const response = await this.getDisbeacByMacRaw({ mac: mac }, initOverrides);
        return await response.value();
    }

    /**
     * Get disbeacs by user ID
     */
    async getDisbeacsByUserIdRaw(requestParameters: GetDisbeacsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Disbeac>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getDisbeacsByUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbeacs/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DisbeacFromJSON));
    }

    /**
     * Get disbeacs by user ID
     */
    async getDisbeacsByUserId(userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Disbeac>> {
        const response = await this.getDisbeacsByUserIdRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Save disbeac
     */
    async saveDisbeacRaw(requestParameters: SaveDisbeacRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Disbeac>> {
        if (requestParameters.disbeacDTO === null || requestParameters.disbeacDTO === undefined) {
            throw new runtime.RequiredError('disbeacDTO','Required parameter requestParameters.disbeacDTO was null or undefined when calling saveDisbeac.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbeacs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DisbeacDTOToJSON(requestParameters.disbeacDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DisbeacFromJSON(jsonValue));
    }

    /**
     * Save disbeac
     */
    async saveDisbeac(disbeacDTO: DisbeacDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Disbeac> {
        const response = await this.saveDisbeacRaw({ disbeacDTO: disbeacDTO }, initOverrides);
        return await response.value();
    }

    /**
     * Update disbeac
     */
    async updateDisbeacRaw(requestParameters: UpdateDisbeacRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HandledResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDisbeac.');
        }

        if (requestParameters.disbeacDTO === null || requestParameters.disbeacDTO === undefined) {
            throw new runtime.RequiredError('disbeacDTO','Required parameter requestParameters.disbeacDTO was null or undefined when calling updateDisbeac.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbeacs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DisbeacDTOToJSON(requestParameters.disbeacDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandledResponseFromJSON(jsonValue));
    }

    /**
     * Update disbeac
     */
    async updateDisbeac(id: string, disbeacDTO: DisbeacDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HandledResponse> {
        const response = await this.updateDisbeacRaw({ id: id, disbeacDTO: disbeacDTO }, initOverrides);
        return await response.value();
    }

    /**
     * Update user ID
     */
    async updateDisbeacUserIdRaw(requestParameters: UpdateDisbeacUserIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HandledResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDisbeacUserId.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateDisbeacUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/disbeacs/{id}/user/{userId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandledResponseFromJSON(jsonValue));
    }

    /**
     * Update user ID
     */
    async updateDisbeacUserId(id: string, userId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HandledResponse> {
        const response = await this.updateDisbeacUserIdRaw({ id: id, userId: userId }, initOverrides);
        return await response.value();
    }

}
