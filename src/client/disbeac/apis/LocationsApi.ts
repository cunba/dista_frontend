/* tslint:disable */
/* eslint-disable */
/**
 * Disheap Service
 * Disheap API connection to Disbands and Disbeacs information
 *
 * The version of the OpenAPI document: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Location,
    LocationFromJSON,
    LocationToJSON,
    LocationDTO,
    LocationDTOFromJSON,
    LocationDTOToJSON,
} from '../models';

export interface DeleteByDisbeacIdRequest {
    disbeacId: string;
}

export interface DeleteLocationRequest {
    id: string;
}

export interface GetLast1ByDisbeacIdRequest {
    minDate: number;
    maxDate: number;
    disbeacId: string;
}

export interface GetLocationByDateBetweenAndDisbeacIdRequest {
    minDate: number;
    maxDate: number;
    disbeacId: string;
}

export interface GetLocationByDisbeacIdRequest {
    disbeacId: string;
}

export interface GetLocationByIdRequest {
    id: string;
}

export interface SaveLocationRequest {
    locationDTO?: LocationDTO;
}

/**
 * LocationsApi - interface
 * 
 * @export
 * @interface LocationsApiInterface
 */
export interface LocationsApiInterface {
    /**
     * 
     * @summary Delete all locations by disbeac ID
     * @param {string} disbeacId Disbeac ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    deleteByDisbeacIdRaw(requestParameters: DeleteByDisbeacIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Location>>>;

    /**
     * Delete all locations by disbeac ID
     */
    deleteByDisbeacId(disbeacId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Location>>;

    /**
     * 
     * @summary Delete location by id
     * @param {string} id Location ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    deleteLocationRaw(requestParameters: DeleteLocationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     * Delete location by id
     */
    deleteLocation(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Location>;

    /**
     * 
     * @summary Get all locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    getAllLocationRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Location>>>;

    /**
     * Get all locations
     */
    getAllLocation(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Location>>;

    /**
     * 
     * @summary Get last location by disbeac ID
     * @param {number} minDate Min date
     * @param {number} maxDate Max date
     * @param {string} disbeacId Disbeac ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    getLast1ByDisbeacIdRaw(requestParameters: GetLast1ByDisbeacIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     * Get last location by disbeac ID
     */
    getLast1ByDisbeacId(minDate: number, maxDate: number, disbeacId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Location>;

    /**
     * 
     * @summary Get location by date between and disbeac ID
     * @param {number} minDate Min date
     * @param {number} maxDate Max date
     * @param {string} disbeacId Disbeac ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    getLocationByDateBetweenAndDisbeacIdRaw(requestParameters: GetLocationByDateBetweenAndDisbeacIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Location>>>;

    /**
     * Get location by date between and disbeac ID
     */
    getLocationByDateBetweenAndDisbeacId(minDate: number, maxDate: number, disbeacId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Location>>;

    /**
     * 
     * @summary Get location by disbeac ID
     * @param {string} disbeacId Disbeac ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    getLocationByDisbeacIdRaw(requestParameters: GetLocationByDisbeacIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Location>>>;

    /**
     * Get location by disbeac ID
     */
    getLocationByDisbeacId(disbeacId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Location>>;

    /**
     * 
     * @summary Get location by ID
     * @param {string} id Disbeac ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    getLocationByIdRaw(requestParameters: GetLocationByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     * Get location by ID
     */
    getLocationById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Location>;

    /**
     * 
     * @summary Save location
     * @param {LocationDTO} [locationDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    saveLocationRaw(requestParameters: SaveLocationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     * Save location
     */
    saveLocation(locationDTO?: LocationDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Location>;

}

/**
 * 
 */
export class LocationsApi extends runtime.BaseAPI implements LocationsApiInterface {

    /**
     * Delete all locations by disbeac ID
     */
    async deleteByDisbeacIdRaw(requestParameters: DeleteByDisbeacIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Location>>> {
        if (requestParameters.disbeacId === null || requestParameters.disbeacId === undefined) {
            throw new runtime.RequiredError('disbeacId','Required parameter requestParameters.disbeacId was null or undefined when calling deleteByDisbeacId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations/disbeac/{disbeacId}`.replace(`{${"disbeacId"}}`, encodeURIComponent(String(requestParameters.disbeacId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationFromJSON));
    }

    /**
     * Delete all locations by disbeac ID
     */
    async deleteByDisbeacId(disbeacId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Location>> {
        const response = await this.deleteByDisbeacIdRaw({ disbeacId: disbeacId }, initOverrides);
        return await response.value();
    }

    /**
     * Delete location by id
     */
    async deleteLocationRaw(requestParameters: DeleteLocationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     * Delete location by id
     */
    async deleteLocation(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Location> {
        const response = await this.deleteLocationRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get all locations
     */
    async getAllLocationRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Location>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationFromJSON));
    }

    /**
     * Get all locations
     */
    async getAllLocation(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Location>> {
        const response = await this.getAllLocationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get last location by disbeac ID
     */
    async getLast1ByDisbeacIdRaw(requestParameters: GetLast1ByDisbeacIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters.minDate === null || requestParameters.minDate === undefined) {
            throw new runtime.RequiredError('minDate','Required parameter requestParameters.minDate was null or undefined when calling getLast1ByDisbeacId.');
        }

        if (requestParameters.maxDate === null || requestParameters.maxDate === undefined) {
            throw new runtime.RequiredError('maxDate','Required parameter requestParameters.maxDate was null or undefined when calling getLast1ByDisbeacId.');
        }

        if (requestParameters.disbeacId === null || requestParameters.disbeacId === undefined) {
            throw new runtime.RequiredError('disbeacId','Required parameter requestParameters.disbeacId was null or undefined when calling getLast1ByDisbeacId.');
        }

        const queryParameters: any = {};

        if (requestParameters.minDate !== undefined) {
            queryParameters['min date'] = requestParameters.minDate;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['max date'] = requestParameters.maxDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations/last/disbeacId/{disbeacId}`.replace(`{${"disbeacId"}}`, encodeURIComponent(String(requestParameters.disbeacId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     * Get last location by disbeac ID
     */
    async getLast1ByDisbeacId(minDate: number, maxDate: number, disbeacId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Location> {
        const response = await this.getLast1ByDisbeacIdRaw({ minDate: minDate, maxDate: maxDate, disbeacId: disbeacId }, initOverrides);
        return await response.value();
    }

    /**
     * Get location by date between and disbeac ID
     */
    async getLocationByDateBetweenAndDisbeacIdRaw(requestParameters: GetLocationByDateBetweenAndDisbeacIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Location>>> {
        if (requestParameters.minDate === null || requestParameters.minDate === undefined) {
            throw new runtime.RequiredError('minDate','Required parameter requestParameters.minDate was null or undefined when calling getLocationByDateBetweenAndDisbeacId.');
        }

        if (requestParameters.maxDate === null || requestParameters.maxDate === undefined) {
            throw new runtime.RequiredError('maxDate','Required parameter requestParameters.maxDate was null or undefined when calling getLocationByDateBetweenAndDisbeacId.');
        }

        if (requestParameters.disbeacId === null || requestParameters.disbeacId === undefined) {
            throw new runtime.RequiredError('disbeacId','Required parameter requestParameters.disbeacId was null or undefined when calling getLocationByDateBetweenAndDisbeacId.');
        }

        const queryParameters: any = {};

        if (requestParameters.minDate !== undefined) {
            queryParameters['min date'] = requestParameters.minDate;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['max date'] = requestParameters.maxDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations/date/between/disbeacId/{disbeacId}`.replace(`{${"disbeacId"}}`, encodeURIComponent(String(requestParameters.disbeacId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationFromJSON));
    }

    /**
     * Get location by date between and disbeac ID
     */
    async getLocationByDateBetweenAndDisbeacId(minDate: number, maxDate: number, disbeacId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Location>> {
        const response = await this.getLocationByDateBetweenAndDisbeacIdRaw({ minDate: minDate, maxDate: maxDate, disbeacId: disbeacId }, initOverrides);
        return await response.value();
    }

    /**
     * Get location by disbeac ID
     */
    async getLocationByDisbeacIdRaw(requestParameters: GetLocationByDisbeacIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Location>>> {
        if (requestParameters.disbeacId === null || requestParameters.disbeacId === undefined) {
            throw new runtime.RequiredError('disbeacId','Required parameter requestParameters.disbeacId was null or undefined when calling getLocationByDisbeacId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations/disbeacId/{disbeacId}`.replace(`{${"disbeacId"}}`, encodeURIComponent(String(requestParameters.disbeacId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationFromJSON));
    }

    /**
     * Get location by disbeac ID
     */
    async getLocationByDisbeacId(disbeacId: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Location>> {
        const response = await this.getLocationByDisbeacIdRaw({ disbeacId: disbeacId }, initOverrides);
        return await response.value();
    }

    /**
     * Get location by ID
     */
    async getLocationByIdRaw(requestParameters: GetLocationByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLocationById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     * Get location by ID
     */
    async getLocationById(id: string, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Location> {
        const response = await this.getLocationByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Save location
     */
    async saveLocationRaw(requestParameters: SaveLocationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Location>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationDTOToJSON(requestParameters.locationDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     * Save location
     */
    async saveLocation(locationDTO?: LocationDTO, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Location> {
        const response = await this.saveLocationRaw({ locationDTO: locationDTO }, initOverrides);
        return await response.value();
    }

}
